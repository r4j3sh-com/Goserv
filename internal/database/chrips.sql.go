// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chrips.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addNewChrip = `-- name: AddNewChrip :one
INSERT INTO chrips (id, created_at, updated_at, body, user_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, body, user_id
`

type AddNewChripParams struct {
	Body   string
	UserID uuid.NullUUID
}

func (q *Queries) AddNewChrip(ctx context.Context, arg AddNewChripParams) (Chrip, error) {
	row := q.db.QueryRowContext(ctx, addNewChrip, arg.Body, arg.UserID)
	var i Chrip
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const deleteChripsByID = `-- name: DeleteChripsByID :exec
DELETE FROM chrips
WHERE id = $1
`

func (q *Queries) DeleteChripsByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteChripsByID, id)
	return err
}

const getChirpsByAuthorID = `-- name: GetChirpsByAuthorID :many
SELECT id, created_at, updated_at, body, user_id FROM chrips
WHERE user_id = $1
ORDER BY created_at ASC
LIMIT 4
`

func (q *Queries) GetChirpsByAuthorID(ctx context.Context, userID uuid.NullUUID) ([]Chrip, error) {
	rows, err := q.db.QueryContext(ctx, getChirpsByAuthorID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chrip
	for rows.Next() {
		var i Chrip
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChripByID = `-- name: GetChripByID :one
SELECT id, created_at, updated_at, body, user_id FROM chrips
WHERE id = $1
`

func (q *Queries) GetChripByID(ctx context.Context, id uuid.UUID) (Chrip, error) {
	row := q.db.QueryRowContext(ctx, getChripByID, id)
	var i Chrip
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const getChrips = `-- name: GetChrips :many
SELECT id, created_at, updated_at, body, user_id FROM chrips
ORDER BY created_at ASC
`

func (q *Queries) GetChrips(ctx context.Context) ([]Chrip, error) {
	rows, err := q.db.QueryContext(ctx, getChrips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chrip
	for rows.Next() {
		var i Chrip
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
